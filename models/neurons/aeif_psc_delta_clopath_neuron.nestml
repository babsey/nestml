"""
iaf_psc_delta - Current-based leaky integrate-and-fire neuron model with delta-kernel post-synaptic currents
############################################################################################################

Description
+++++++++++

iaf_psc_delta is an implementation of a leaky integrate-and-fire model
where the potential jumps on each spike arrival.

The threshold crossing is followed by an absolute refractory period
during which the membrane potential is clamped to the resting potential.

Spikes arriving while the neuron is refractory, are discarded by
default. If the property ``with_refr_input`` is set to true, such
spikes are added to the membrane potential at the end of the
refractory period, dampened according to the interval between
arrival and end of refractoriness.

The general framework for the consistent formulation of systems with
neuron like dynamics interacting by point events is described in
[1]_.  A flow chart can be found in [2]_.

Critical tests for the formulation of the neuron model are the
comparisons of simulation results for different computation step
sizes. sli/testsuite/nest contains a number of such tests.

The iaf_psc_delta is the standard model used to check the consistency
of the nest simulation kernel because it is at the same time complex
enough to exhibit non-trivial dynamics and simple enough compute
relevant measures analytically.


References
++++++++++

.. [1] Rotter S,  Diesmann M (1999). Exact simulation of
       time-invariant linear systems with applications to neuronal
       modeling. Biologial Cybernetics 81:381-402.
       DOI: https://doi.org/10.1007/s004220050570
.. [2] Diesmann M, Gewaltig M-O, Rotter S, & Aertsen A (2001). State
       space analysis of synchronous spiking in cortical neural
       networks. Neurocomputing 38-40:565-571.
       DOI: https://doi.org/10.1016/S0925-2312(01)00409-X


See also
++++++++

iaf_psc_alpha, iaf_psc_exp
"""
model aeif_psc_delta_clopath_neuron:
    state:
        V_m mV = E_L   # Membrane potential
        w pA = 0 pA    # Spike-adaptation current
        refr_t ms = 0 ms    # Refractory period timer
        is_refractory boolean = false
        clamp_t ms = 0 ms    # Refractory period timer
        is_clamped boolean = false

    equations:
        kernel K_delta = delta(t)

        inline V_bounded mV = min(V_m, V_peak)    # prevent exponential divergence
        # Add inlines to simplify the equation definition of V_m
        inline exp_arg real = (V_bounded - V_th) / Delta_T
        inline I_spike pA = g_L * Delta_T * exp(exp_arg)
#        recordable inline I_syn pA =

        V_m' = (-g_L * (V_bounded - E_L) + I_spike +  (convolve(K_delta, spikes) * pA) - w + I_e + I_stim) / C_m
        w' = (a * (V_bounded - E_L) - w) / tau_w

    parameters:
        g_L nS = 30 nS
        C_m     pF = 250 pF             # Capacity of the membrane
        refr_T ms = 2 ms                # Duration of refractory period
        clamp_T ms = 2 ms                # Duration of refractory period
        tau_syn ms = 2 ms               # Time constant of synaptic current
        E_L     mV = -70.6 mV             # Resting membrane potential
        V_reset mV = -60 mV             # Reset potential of the membrane
        V_clamp mV = 33 mV             # Reset potential of the membrane
        V_th    mV = -55 mV             # Spike threshold
        V_min   mV = -inf * 1 mV        # Absolute lower value for the membrane potential
        V_peak mV = 0 mV        # Spike detection threshold

        # spike adaptation parameters
        a nS = 4 nS             # Subthreshold adaptation
        b pA = 80.5 pA          # Spike-triggered adaptation
        Delta_T mV = 2.0 mV     # Slope factor
        tau_w ms = 144.0 ms     # Adaptation time constant

        # constant external input current
        I_e pA = 0 pA

    input:
        spikes <- spike
        I_stim pA <- continuous

    output:
        spike

    update:
        if not is_refractory and not is_clamped:
            # evolve all ODEs (including V_m)
            integrate_odes()

        if is_refractory:
            # neuron is absolute refractory, do not evolve V_m
            refr_t -= resolution()

        if is_clamped:
            # neuron is clamped
            clamp_t -= resolution()

    onCondition(not is_clamped and not is_refractory and V_m >= V_th):
        # threshold crossing
        clamp_t = clamp_T
        is_clamped = true
        V_m = V_clamp
        w += b
        emit_spike()

    onCondition(is_clamped and clamp_t <= 0 ms):
        # end of clamped period
        clamp_t = 0 ms
        is_clamped = false
        V_m = V_reset

        if refr_T > 0 ms:
            # start absolute refractory period
            is_refractory = true
            refr_t = refr_T

    onCondition(is_refractory and refr_t <= 0 ms):
        # end of refractory period
        is_refractory = false
        refr_t = 0 ms
